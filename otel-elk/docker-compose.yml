services:  setup:    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}    volumes:      - certs:/usr/share/elasticsearch/config/certs    networks:      - infra    user: "0"    command: >      bash -c '        if [ x${ELASTIC_PASSWORD} == x ]; then          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";          exit 1;        elif [ x${KIBANA_PASSWORD} == x ]; then          echo "Set the KIBANA_PASSWORD environment variable in the .env file";          exit 1;        fi;        if [ ! -f certs/ca.zip ]; then          echo "Creating CA";          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;          unzip config/certs/ca.zip -d config/certs;        fi;        if [ ! -f certs/certs.zip ]; then          echo "Creating certs";          echo -ne \          "instances:\n"\          "  - name: elasticsearch\n"\          "    dns:\n"\          "      - elasticsearch\n"\          "      - localhost\n"\          "    ip:\n"\          "      - 127.0.0.1\n"\          "  - name: apm\n"\          "    dns:\n"\          "      - apm\n"\          "      - localhost\n"\          "    ip:\n"\          "      - 127.0.0.1\n"\          > config/certs/instances.yml;          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;          unzip config/certs/certs.zip -d config/certs;        fi;        echo "Setting file permissions"        chown -R root:root config/certs;        find . -type d -exec chmod 755 \{\} \;;        find . -type f -exec chmod 644 \{\} \;;        echo "Waiting for Elasticsearch availability";        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;        echo "Setting kibana_system password";        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;        echo "All done!";      '    healthcheck:      test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]      interval: 1s      timeout: 5s      retries: 120  elasticsearch:    hostname: elasticsearch    depends_on:      setup:        condition: service_healthy    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}    environment:      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}      - node.name=elasticsearch      - xpack.ml.enabled=false      - xpack.security.enabled=true      - xpack.security.http.ssl.enabled=true      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt      - xpack.security.http.ssl.verification_mode=certificate      - xpack.security.transport.ssl.enabled=true      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt      - xpack.security.transport.ssl.verification_mode=certificate      - xpack.license.self_generated.type=${LICENSE}      - discovery.type=single-node      - ingest.geoip.downloader.enabled=false      - ES_JAVA_OPTS=${ES_JAVA_OPTS}    ports:      - ${ES_PORT}:9200    volumes:      - certs:/usr/share/elasticsearch/config/certs      - elasticsearch_data:/usr/share/elasticsearch/data    networks:      - infra    healthcheck:      test:        [          "CMD-SHELL",          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",        ]      interval: 10s      timeout: 10s      retries: 120  kibana:    depends_on:      elasticsearch:        condition: service_healthy    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}    ports:      - ${KIBANA_PORT}:5601    environment:      - SERVERNAME=kibana      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200      - ELASTICSEARCH_USERNAME=kibana_system      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}    networks:      - infra    volumes:      - certs:/usr/share/kibana/config/certs      - kibanadata:/usr/share/kibana/data    healthcheck:      test:        [          "CMD-SHELL",          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",        ]      interval: 10s      timeout: 10s      retries: 120  apm-server:    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}    volumes:      - ./apm-server.yml:/usr/share/apm-server/apm-server.yml    ports:      - ${APM_PORT}:8200    networks:      - infra    depends_on:      elasticsearch:        condition: service_healthy      kibana:        condition: service_healthy  otel-collector:    image: otel/opentelemetry-collector-contrib    volumes:      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml    ports:      - 4317:4317 # OTLP gRPC receiver      - 4318:4318 # OTLP http receiver    depends_on:      - apm-server    networks:      - infravolumes:  certs:    driver: local  elasticsearch_data:    driver: local  kibanadata:    driver: localnetworks:  infra:    name: shared-infra    external: true